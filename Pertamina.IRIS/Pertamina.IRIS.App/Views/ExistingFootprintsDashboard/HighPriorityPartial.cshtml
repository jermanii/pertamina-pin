@using Pertamina.IRIS.Models.Base
@inject GlobalVariableBaseModel globalParam
@model Pertamina.IRIS.Models.ViewModels.ExistingFootprintsDashboardViewModel
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor

@if (!(Model.HighPriority is null))
{
    @foreach (var high in Model.HighPriority)
    {
        <div class="card card-flush mb-6">
            <a class="card border-hover-primary cursor-pointer"
               data-toggle="details-partial-modal"
               data-target="#HighPriorityModal"
               data-url="@Url.Action("Detail", "ExistingFootprintsDashboard", new { guid = high.Id, year = high.Year })">
                <div class="card-header padding-high-priority-card-header border-0 min-h-2px">
                    <div class="card-title m-0">
                        <span class="fw-bold fs-5 px-0">@high.CompanyName</span>
                    </div>
                </div>
                <div class="card-body padding-high-priority-card-body min-h-2px mb-3">
                    <div class="d-flex flex-wrap">
                        <div class="padding-right-10">
                            @if (high.TotalAsset.HasValue)
                            {
                                <div class="fs-6 text-gray-600 fw-bold">$@(high.TotalAsset.Value.ToString("#,##0.00"))mn</div>
                                <div class="fs-8 text-gray-400">Total Asset</div>
                            }
                            else
                            {
                                <div class="fs-6 text-gray-600 fw-bold">N/A</div>
                                <div class="fs-8 text-gray-400">Total Asset</div>
                            }
                        </div>
                        <div class="padding-right-10">
                            @if (high.Revenue.HasValue)
                            {
                                <div class="fs-6 text-gray-600 fw-bold">$@(high.Revenue.Value.ToString("#,##0.00"))mn</div>
                                <div class="fs-8 text-gray-400">Total Revenue</div>
                            }
                            else
                            {
                                <div class="fs-6 text-gray-600 fw-bold">N/A</div>
                                <div class="fs-8 text-gray-400">Total Revenue</div>
                            }
                        </div>
                        <div class="padding-right-10">
                            @if (high.Ebitda.HasValue)
                            {
                                <div class="fs-6 text-gray-600 fw-bold">$@(high.Ebitda.Value.ToString("#,##0.00"))mn</div>
                                <div class="fs-8 text-gray-400">EBITDA</div>
                            }
                            else
                            {
                                <div class="fs-6 text-gray-600 fw-bold">N/A</div>
                                <div class="fs-8 text-gray-400">EBITDA</div>
                            }
                        </div>
                        <div class="padding-right-10">
                            @if (high.Year.HasValue)
                            {
                                <div class="fs-6 text-gray-600 fw-bold">@(high.Year)</div>
                                <div class="fs-8 text-gray-400">Year</div>
                            }
                            else
                            {
                                <div class="fs-6 text-gray-600 fw-bold">N/A</div>
                                <div class="fs-8 text-gray-400">Year</div>
                            }
                        </div>
                    </div>
                </div>
                <div class="card-footer border-1 padding-high-priority-card-footer min-h-30px">
                    <div class="d-flex align-items-center justify-content-between w-100 mt-auto">
                        <div class="symbol-group symbol-hover mt-2 mb-2">
                            <div class="symbol symbol-20px symbol-2by3 me-4" data-bs-toggle="tooltip" title="@high.NamaNegara">
                                @if (high.ExistsFlag)
                                {
                                    <img class="symbol-label" src="@globalParam.PrefixPicName@high.Flag" alt="Pic">
                                }
                                else
                                {
                                    <img class="symbol-label" src="@globalParam.PrefixPicName/assets/media/flags/globe.svg" alt="Pic">
                                }
                            </div>
                            <div class="me-4">
                            </div>
                            @if (!string.IsNullOrEmpty(@high.HubHeadName))
                            {
                                <div class="symbol symbol-20px symbol-circle" data-bs-toggle="tooltip" title="@high.HubHeadName">
                                    <span class="symbol-label bg-info text-inverse-info fw-bold">@high.HubHeadName.Substring(0, 1)</span>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(@high.PicFungsiName))
                            {
                                <div class="symbol symbol-20px symbol-circle" data-bs-toggle="tooltip" title="@high.PicFungsiName">
                                    <span class="symbol-label bg-info text-inverse-info fw-bold">@high.PicFungsiName.Substring(0, 1)</span>
                                </div>
                            }
                        </div>
                        <span class="fs-8 text-gray-400 px-0">@high.UpdatedWording</span>
                    </div>
                </div>
            </a>
        </div>
    }
    @Html.HiddenFor(x => x.PageCountSort, "Value")
    @Html.HiddenFor(x => x.RecordHighPriorityCountSort, "Value")
    @Html.HiddenFor(x => x.AllRecordHighPriorityCountSort, "Value")
    @Html.HiddenFor(x => x.CountryAcronym, "Value")
    @if (Model.PageCountSort > 0 && (Model.RecordHighPriorityCountSort != Model.AllRecordHighPriorityCountSort))
    {
        <div class="d-flex justify-content-center lazy-loading" hidden>
            <div class="loader">
                <div class="loader-inner">
                    <div class="loader-block"></div>
                    <div class="loader-block"></div>
                    <div class="loader-block"></div>
                    <div class="loader-block"></div>
                    <div class="loader-block"></div>
                    <div class="loader-block"></div>
                    <div class="loader-block"></div>
                    <div class="loader-block"></div>
                </div>
            </div>
        </div>
    }
}